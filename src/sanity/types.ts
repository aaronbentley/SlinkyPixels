/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Work = {
    _id: string
    _type: 'work'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title: string
    subtitle: string
    slug?: Slug
    url: string
    uses: Array<string>
    content: Array<
        | ({
              _key: string
          } & Frontpage)
        | ({
              _key: string
          } & Body)
        | ({
              _key: string
          } & CollectionGrid)
    >
    image: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    seo?: Seo
}

export type Settings = {
    _id: string
    _type: 'settings'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title: string
    description: string
    url: string
    socialLinks?: Array<{
        name:
            | 'X'
            | 'Instagram'
            | 'GitHub'
            | 'Reddit'
            | 'Threads'
            | 'Facebook'
            | 'Youtube'
            | 'LinkedIn'
        url: string
        _type: 'socialLink'
        _key: string
    }>
}

export type Menu = {
    _id: string
    _type: 'menu'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title: string
    links?: Array<
        {
            _key: string
        } & Link
    >
}

export type Link = {
    _type: 'link'
    label: string
    customUrl?: boolean
    destinationRef?:
        | {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'page'
          }
        | {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              [internalGroqTypeReferenceTo]?: 'post'
          }
    destinationHref?: string
    blank?: boolean
}

export type Frontpage = {
    _type: 'frontpage'
    title: string
    content: string
    buttons?: Array<
        {
            _key: string
        } & Link
    >
}

export type Content = Array<
    | ({
          _key: string
      } & Frontpage)
    | ({
          _key: string
      } & Body)
    | ({
          _key: string
      } & CollectionGrid)
>

export type CollectionGrid = {
    _type: 'collectionGrid'
    title: string
    contentType: 'post' | 'page' | 'work' | 'custom'
    limit?: number
    customContent?: Array<
        | {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              _key: string
              [internalGroqTypeReferenceTo]?: 'page'
          }
        | {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              _key: string
              [internalGroqTypeReferenceTo]?: 'post'
          }
        | {
              _ref: string
              _type: 'reference'
              _weak?: boolean
              _key: string
              [internalGroqTypeReferenceTo]?: 'work'
          }
    >
}

export type Category = {
    _id: string
    _type: 'category'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title: string
    slug: Slug
    content: Content
}

export type BodyPortableText = Array<{
    children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
    }>
    style?: 'normal' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'blockquote'
    listItem?: 'bullet' | 'number'
    markDefs?: Array<{
        customUrl?: boolean
        destinationRef?:
            | {
                  _ref: string
                  _type: 'reference'
                  _weak?: boolean
                  [internalGroqTypeReferenceTo]?: 'post'
              }
            | {
                  _ref: string
                  _type: 'reference'
                  _weak?: boolean
                  [internalGroqTypeReferenceTo]?: 'page'
              }
        destinationHref?: string
        blank?: boolean
        _type: 'link'
        _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
}>

export type Body = {
    _type: 'body'
    title: string
    content: BodyPortableText
}

export type BasicPortableText = Array<{
    children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
        customUrl?: boolean
        linkDestinationRef?:
            | {
                  _ref: string
                  _type: 'reference'
                  _weak?: boolean
                  [internalGroqTypeReferenceTo]?: 'post'
              }
            | {
                  _ref: string
                  _type: 'reference'
                  _weak?: boolean
                  [internalGroqTypeReferenceTo]?: 'page'
              }
        linkDestinationHref?: string
        blank?: boolean
        _type: 'link'
        _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
}>

export type Post = {
    _id: string
    _type: 'post'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title: string
    subtitle: string
    slug: Slug
    content: Content
    image: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    categories?: Array<{
        _ref: string
        _type: 'reference'
        _weak?: boolean
        _key: string
        [internalGroqTypeReferenceTo]?: 'category'
    }>
    seo: Seo
    publishDate: string
}

export type Page = {
    _id: string
    _type: 'page'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title: string
    subtitle: string
    slug: Slug
    content: Content
    image: {
        asset?: {
            _ref: string
            _type: 'reference'
            _weak?: boolean
            [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
    seo?: Seo
}

export type Seo = {
    _type: 'seo'
    seoTitle: string
    seoDescription: string
}

export type SanityImagePaletteSwatch = {
    _type: 'sanity.imagePaletteSwatch'
    background?: string
    foreground?: string
    population?: number
    title?: string
}

export type SanityImagePalette = {
    _type: 'sanity.imagePalette'
    darkMuted?: SanityImagePaletteSwatch
    lightVibrant?: SanityImagePaletteSwatch
    darkVibrant?: SanityImagePaletteSwatch
    vibrant?: SanityImagePaletteSwatch
    dominant?: SanityImagePaletteSwatch
    lightMuted?: SanityImagePaletteSwatch
    muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
    _type: 'sanity.imageDimensions'
    height: number
    width: number
    aspectRatio: number
}

export type SanityImageHotspot = {
    _type: 'sanity.imageHotspot'
    x: number
    y: number
    height: number
    width: number
}

export type SanityImageCrop = {
    _type: 'sanity.imageCrop'
    top: number
    bottom: number
    left: number
    right: number
}

export type SanityFileAsset = {
    _id: string
    _type: 'sanity.fileAsset'
    _createdAt: string
    _updatedAt: string
    _rev: string
    originalFilename?: string
    label?: string
    title?: string
    description?: string
    altText?: string
    sha1hash?: string
    extension?: string
    mimeType?: string
    size?: number
    assetId?: string
    uploadId?: string
    path?: string
    url?: string
    source?: SanityAssetSourceData
}

export type SanityImageAsset = {
    _id: string
    _type: 'sanity.imageAsset'
    _createdAt: string
    _updatedAt: string
    _rev: string
    originalFilename?: string
    label?: string
    title?: string
    description?: string
    altText?: string
    sha1hash?: string
    extension?: string
    mimeType?: string
    size?: number
    assetId?: string
    uploadId?: string
    path?: string
    url?: string
    metadata?: SanityImageMetadata
    source?: SanityAssetSourceData
}

export type SanityImageMetadata = {
    _type: 'sanity.imageMetadata'
    location?: Geopoint
    dimensions?: SanityImageDimensions
    palette?: SanityImagePalette
    lqip?: string
    blurHash?: string
    hasAlpha?: boolean
    isOpaque?: boolean
}

export type Geopoint = {
    _type: 'geopoint'
    lat?: number
    lng?: number
    alt?: number
}

export type Slug = {
    _type: 'slug'
    current: string
    source?: string
}

export type SanityAssetSourceData = {
    _type: 'sanity.assetSourceData'
    name?: string
    id?: string
    url?: string
}

export type AllSanitySchemaTypes =
    | Work
    | Settings
    | Menu
    | Link
    | Frontpage
    | Content
    | CollectionGrid
    | Category
    | BodyPortableText
    | Body
    | BasicPortableText
    | Post
    | Page
    | Seo
    | SanityImagePaletteSwatch
    | SanityImagePalette
    | SanityImageDimensions
    | SanityImageHotspot
    | SanityImageCrop
    | SanityFileAsset
    | SanityImageAsset
    | SanityImageMetadata
    | Geopoint
    | Slug
    | SanityAssetSourceData
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./src/sanity/lib/queries.ts
// Variable: PAGE_PATHS_QUERY
// Query: *[        _type == 'page' &&        defined(slug.current) &&        slug.current != '/'    ] {            slug {        current    }    }
export type PAGE_PATHS_QUERYResult = Array<{
    slug: {
        current: string
    }
}>
// Variable: PAGE_QUERY
// Query: *[        _type == 'page' &&         defined(slug.current) &&        slug.current == $slug    ][0] {        _id,        _type,        title,        subtitle,            content[] {        ...,        _key,        _type,        'title': coalesce(title, 'Content Title'),            _type == 'frontpage' => {        title,        content,        buttons[] {            _key,            label,            customUrl,            destinationHref,            destinationRef-> {                _type,                title,                    slug {        current    }            },            blank        }    },            _type == 'body' => {        content[] {            ...,            markDefs[] {                ...,                (_type == 'link' && customUrl != true) => {                      destinationRef-> {                        _type,                        title,                            slug {        current    }                    }                }            },        }    },            _type == 'collectionGrid' => {        contentType,        limit,        "content": select(            defined(customContent) && contentType == 'custom' => customContent[]-> {                _id,                _type,                title,                subtitle,                excerpt,                    slug {        current    },                    image {        ...,        asset-> {            ...,            metadata        }    }            },            defined(contentType) && contentType != 'custom'  => *[_type == ^.contentType] {                _id,                _type,                title,                subtitle,                excerpt,                    slug {        current    },                    image {        ...,        asset-> {            ...,            metadata        }    }            }|order(title asc),            []        )    }    },            image {        ...,        asset-> {            ...,            metadata        }    }    }
export type PAGE_QUERYResult = {
    _id: string
    _type: 'page'
    title: string
    subtitle: string
    content: Array<
        | {
              _key: string
              _type: 'body'
              title: string
              content: Array<{
                  children?: Array<{
                      marks?: Array<string>
                      text?: string
                      _type: 'span'
                      _key: string
                  }>
                  style?:
                      | 'blockquote'
                      | 'h2'
                      | 'h3'
                      | 'h4'
                      | 'h5'
                      | 'h6'
                      | 'normal'
                  listItem?: 'bullet' | 'number'
                  markDefs: Array<
                      | {
                            customUrl?: boolean
                            destinationRef?:
                                | {
                                      _ref: string
                                      _type: 'reference'
                                      _weak?: boolean
                                      [internalGroqTypeReferenceTo]?: 'page'
                                  }
                                | {
                                      _ref: string
                                      _type: 'reference'
                                      _weak?: boolean
                                      [internalGroqTypeReferenceTo]?: 'post'
                                  }
                            destinationHref?: string
                            blank?: boolean
                            _type: 'link'
                            _key: string
                        }
                      | {
                            customUrl?: boolean
                            destinationRef:
                                | {
                                      _type: 'page'
                                      title: string
                                      slug: {
                                          current: string
                                      }
                                  }
                                | {
                                      _type: 'post'
                                      title: string
                                      slug: {
                                          current: string
                                      }
                                  }
                                | null
                            destinationHref?: string
                            blank?: boolean
                            _type: 'link'
                            _key: string
                        }
                  > | null
                  level?: number
                  _type: 'block'
                  _key: string
              }>
          }
        | {
              _key: string
              _type: 'collectionGrid'
              title: string
              contentType: 'custom' | 'page' | 'post' | 'work'
              limit: number | null
              customContent?: Array<
                  | {
                        _ref: string
                        _type: 'reference'
                        _weak?: boolean
                        _key: string
                        [internalGroqTypeReferenceTo]?: 'page'
                    }
                  | {
                        _ref: string
                        _type: 'reference'
                        _weak?: boolean
                        _key: string
                        [internalGroqTypeReferenceTo]?: 'post'
                    }
                  | {
                        _ref: string
                        _type: 'reference'
                        _weak?: boolean
                        _key: string
                        [internalGroqTypeReferenceTo]?: 'work'
                    }
              >
              content:
                  | Array<never>
                  | Array<
                        | {
                              _id: string
                              _type: 'page'
                              title: string
                              subtitle: string
                              excerpt: null
                              slug: {
                                  current: string
                              }
                              image: {
                                  asset: {
                                      _id: string
                                      _type: 'sanity.imageAsset'
                                      _createdAt: string
                                      _updatedAt: string
                                      _rev: string
                                      originalFilename?: string
                                      label?: string
                                      title?: string
                                      description?: string
                                      altText?: string
                                      sha1hash?: string
                                      extension?: string
                                      mimeType?: string
                                      size?: number
                                      assetId?: string
                                      uploadId?: string
                                      path?: string
                                      url?: string
                                      metadata: SanityImageMetadata | null
                                      source?: SanityAssetSourceData
                                  } | null
                                  media?: unknown
                                  hotspot?: SanityImageHotspot
                                  crop?: SanityImageCrop
                                  _type: 'image'
                              }
                          }
                        | {
                              _id: string
                              _type: 'post'
                              title: string
                              subtitle: string
                              excerpt: null
                              slug: {
                                  current: string
                              }
                              image: {
                                  asset: {
                                      _id: string
                                      _type: 'sanity.imageAsset'
                                      _createdAt: string
                                      _updatedAt: string
                                      _rev: string
                                      originalFilename?: string
                                      label?: string
                                      title?: string
                                      description?: string
                                      altText?: string
                                      sha1hash?: string
                                      extension?: string
                                      mimeType?: string
                                      size?: number
                                      assetId?: string
                                      uploadId?: string
                                      path?: string
                                      url?: string
                                      metadata: SanityImageMetadata | null
                                      source?: SanityAssetSourceData
                                  } | null
                                  media?: unknown
                                  hotspot?: SanityImageHotspot
                                  crop?: SanityImageCrop
                                  _type: 'image'
                              }
                          }
                        | {
                              _id: string
                              _type: 'work'
                              title: string
                              subtitle: string
                              excerpt: null
                              slug: {
                                  current: string
                              } | null
                              image: {
                                  asset: {
                                      _id: string
                                      _type: 'sanity.imageAsset'
                                      _createdAt: string
                                      _updatedAt: string
                                      _rev: string
                                      originalFilename?: string
                                      label?: string
                                      title?: string
                                      description?: string
                                      altText?: string
                                      sha1hash?: string
                                      extension?: string
                                      mimeType?: string
                                      size?: number
                                      assetId?: string
                                      uploadId?: string
                                      path?: string
                                      url?: string
                                      metadata: SanityImageMetadata | null
                                      source?: SanityAssetSourceData
                                  } | null
                                  media?: unknown
                                  hotspot?: SanityImageHotspot
                                  crop?: SanityImageCrop
                                  _type: 'image'
                              }
                          }
                    >
                  | null
          }
        | {
              _key: string
              _type: 'frontpage'
              title: string
              content: string
              buttons: Array<{
                  _key: string
                  label: string
                  customUrl: boolean | null
                  destinationHref: string | null
                  destinationRef:
                      | {
                            _type: 'page'
                            title: string
                            slug: {
                                current: string
                            }
                        }
                      | {
                            _type: 'post'
                            title: string
                            slug: {
                                current: string
                            }
                        }
                      | null
                  blank: boolean | null
              }> | null
          }
    >
    image: {
        asset: {
            _id: string
            _type: 'sanity.imageAsset'
            _createdAt: string
            _updatedAt: string
            _rev: string
            originalFilename?: string
            label?: string
            title?: string
            description?: string
            altText?: string
            sha1hash?: string
            extension?: string
            mimeType?: string
            size?: number
            assetId?: string
            uploadId?: string
            path?: string
            url?: string
            metadata: SanityImageMetadata | null
            source?: SanityAssetSourceData
        } | null
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
} | null
// Variable: POST_PATHS_QUERY
// Query: *[        _type == 'post' &&         defined(slug.current)    ]{             slug {        current    }    }
export type POST_PATHS_QUERYResult = Array<{
    slug: {
        current: string
    }
}>
// Variable: POST_QUERY
// Query: *[        _type == 'post' &&         defined(slug.current) &&        slug.current == $slug    ][0] {        _id,        _type,        title,        subtitle,            content[] {        ...,        _key,        _type,        'title': coalesce(title, 'Content Title'),            _type == 'frontpage' => {        title,        content,        buttons[] {            _key,            label,            customUrl,            destinationHref,            destinationRef-> {                _type,                title,                    slug {        current    }            },            blank        }    },            _type == 'body' => {        content[] {            ...,            markDefs[] {                ...,                (_type == 'link' && customUrl != true) => {                      destinationRef-> {                        _type,                        title,                            slug {        current    }                    }                }            },        }    },            _type == 'collectionGrid' => {        contentType,        limit,        "content": select(            defined(customContent) && contentType == 'custom' => customContent[]-> {                _id,                _type,                title,                subtitle,                excerpt,                    slug {        current    },                    image {        ...,        asset-> {            ...,            metadata        }    }            },            defined(contentType) && contentType != 'custom'  => *[_type == ^.contentType] {                _id,                _type,                title,                subtitle,                excerpt,                    slug {        current    },                    image {        ...,        asset-> {            ...,            metadata        }    }            }|order(title asc),            []        )    }    },            image {        ...,        asset-> {            ...,            metadata        }    }    }
export type POST_QUERYResult = {
    _id: string
    _type: 'post'
    title: string
    subtitle: string
    content: Array<
        | {
              _key: string
              _type: 'body'
              title: string
              content: Array<{
                  children?: Array<{
                      marks?: Array<string>
                      text?: string
                      _type: 'span'
                      _key: string
                  }>
                  style?:
                      | 'blockquote'
                      | 'h2'
                      | 'h3'
                      | 'h4'
                      | 'h5'
                      | 'h6'
                      | 'normal'
                  listItem?: 'bullet' | 'number'
                  markDefs: Array<
                      | {
                            customUrl?: boolean
                            destinationRef?:
                                | {
                                      _ref: string
                                      _type: 'reference'
                                      _weak?: boolean
                                      [internalGroqTypeReferenceTo]?: 'page'
                                  }
                                | {
                                      _ref: string
                                      _type: 'reference'
                                      _weak?: boolean
                                      [internalGroqTypeReferenceTo]?: 'post'
                                  }
                            destinationHref?: string
                            blank?: boolean
                            _type: 'link'
                            _key: string
                        }
                      | {
                            customUrl?: boolean
                            destinationRef:
                                | {
                                      _type: 'page'
                                      title: string
                                      slug: {
                                          current: string
                                      }
                                  }
                                | {
                                      _type: 'post'
                                      title: string
                                      slug: {
                                          current: string
                                      }
                                  }
                                | null
                            destinationHref?: string
                            blank?: boolean
                            _type: 'link'
                            _key: string
                        }
                  > | null
                  level?: number
                  _type: 'block'
                  _key: string
              }>
          }
        | {
              _key: string
              _type: 'collectionGrid'
              title: string
              contentType: 'custom' | 'page' | 'post' | 'work'
              limit: number | null
              customContent?: Array<
                  | {
                        _ref: string
                        _type: 'reference'
                        _weak?: boolean
                        _key: string
                        [internalGroqTypeReferenceTo]?: 'page'
                    }
                  | {
                        _ref: string
                        _type: 'reference'
                        _weak?: boolean
                        _key: string
                        [internalGroqTypeReferenceTo]?: 'post'
                    }
                  | {
                        _ref: string
                        _type: 'reference'
                        _weak?: boolean
                        _key: string
                        [internalGroqTypeReferenceTo]?: 'work'
                    }
              >
              content:
                  | Array<never>
                  | Array<
                        | {
                              _id: string
                              _type: 'page'
                              title: string
                              subtitle: string
                              excerpt: null
                              slug: {
                                  current: string
                              }
                              image: {
                                  asset: {
                                      _id: string
                                      _type: 'sanity.imageAsset'
                                      _createdAt: string
                                      _updatedAt: string
                                      _rev: string
                                      originalFilename?: string
                                      label?: string
                                      title?: string
                                      description?: string
                                      altText?: string
                                      sha1hash?: string
                                      extension?: string
                                      mimeType?: string
                                      size?: number
                                      assetId?: string
                                      uploadId?: string
                                      path?: string
                                      url?: string
                                      metadata: SanityImageMetadata | null
                                      source?: SanityAssetSourceData
                                  } | null
                                  media?: unknown
                                  hotspot?: SanityImageHotspot
                                  crop?: SanityImageCrop
                                  _type: 'image'
                              }
                          }
                        | {
                              _id: string
                              _type: 'post'
                              title: string
                              subtitle: string
                              excerpt: null
                              slug: {
                                  current: string
                              }
                              image: {
                                  asset: {
                                      _id: string
                                      _type: 'sanity.imageAsset'
                                      _createdAt: string
                                      _updatedAt: string
                                      _rev: string
                                      originalFilename?: string
                                      label?: string
                                      title?: string
                                      description?: string
                                      altText?: string
                                      sha1hash?: string
                                      extension?: string
                                      mimeType?: string
                                      size?: number
                                      assetId?: string
                                      uploadId?: string
                                      path?: string
                                      url?: string
                                      metadata: SanityImageMetadata | null
                                      source?: SanityAssetSourceData
                                  } | null
                                  media?: unknown
                                  hotspot?: SanityImageHotspot
                                  crop?: SanityImageCrop
                                  _type: 'image'
                              }
                          }
                        | {
                              _id: string
                              _type: 'work'
                              title: string
                              subtitle: string
                              excerpt: null
                              slug: {
                                  current: string
                              } | null
                              image: {
                                  asset: {
                                      _id: string
                                      _type: 'sanity.imageAsset'
                                      _createdAt: string
                                      _updatedAt: string
                                      _rev: string
                                      originalFilename?: string
                                      label?: string
                                      title?: string
                                      description?: string
                                      altText?: string
                                      sha1hash?: string
                                      extension?: string
                                      mimeType?: string
                                      size?: number
                                      assetId?: string
                                      uploadId?: string
                                      path?: string
                                      url?: string
                                      metadata: SanityImageMetadata | null
                                      source?: SanityAssetSourceData
                                  } | null
                                  media?: unknown
                                  hotspot?: SanityImageHotspot
                                  crop?: SanityImageCrop
                                  _type: 'image'
                              }
                          }
                    >
                  | null
          }
        | {
              _key: string
              _type: 'frontpage'
              title: string
              content: string
              buttons: Array<{
                  _key: string
                  label: string
                  customUrl: boolean | null
                  destinationHref: string | null
                  destinationRef:
                      | {
                            _type: 'page'
                            title: string
                            slug: {
                                current: string
                            }
                        }
                      | {
                            _type: 'post'
                            title: string
                            slug: {
                                current: string
                            }
                        }
                      | null
                  blank: boolean | null
              }> | null
          }
    >
    image: {
        asset: {
            _id: string
            _type: 'sanity.imageAsset'
            _createdAt: string
            _updatedAt: string
            _rev: string
            originalFilename?: string
            label?: string
            title?: string
            description?: string
            altText?: string
            sha1hash?: string
            extension?: string
            mimeType?: string
            size?: number
            assetId?: string
            uploadId?: string
            path?: string
            url?: string
            metadata: SanityImageMetadata | null
            source?: SanityAssetSourceData
        } | null
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
} | null
// Variable: WORK_PATHS_QUERY
// Query: *[        _type == 'work' &&        defined(slug.current)    ] {            slug {        current    }    }
export type WORK_PATHS_QUERYResult = Array<{
    slug: {
        current: string
    } | null
}>
// Variable: WORK_QUERY
// Query: *[        _type == 'work' &&        defined(slug.current) &&        slug.current == $slug    ][0] {        _id,        _type,        title,        subtitle,        url,        uses,            content[] {        ...,        _key,        _type,        'title': coalesce(title, 'Content Title'),            _type == 'frontpage' => {        title,        content,        buttons[] {            _key,            label,            customUrl,            destinationHref,            destinationRef-> {                _type,                title,                    slug {        current    }            },            blank        }    },            _type == 'body' => {        content[] {            ...,            markDefs[] {                ...,                (_type == 'link' && customUrl != true) => {                      destinationRef-> {                        _type,                        title,                            slug {        current    }                    }                }            },        }    },            _type == 'collectionGrid' => {        contentType,        limit,        "content": select(            defined(customContent) && contentType == 'custom' => customContent[]-> {                _id,                _type,                title,                subtitle,                excerpt,                    slug {        current    },                    image {        ...,        asset-> {            ...,            metadata        }    }            },            defined(contentType) && contentType != 'custom'  => *[_type == ^.contentType] {                _id,                _type,                title,                subtitle,                excerpt,                    slug {        current    },                    image {        ...,        asset-> {            ...,            metadata        }    }            }|order(title asc),            []        )    }    },            image {        ...,        asset-> {            ...,            metadata        }    }    }
export type WORK_QUERYResult = {
    _id: string
    _type: 'work'
    title: string
    subtitle: string
    url: string
    uses: Array<string>
    content: Array<
        | {
              _key: string
              _type: 'body'
              title: string
              content: Array<{
                  children?: Array<{
                      marks?: Array<string>
                      text?: string
                      _type: 'span'
                      _key: string
                  }>
                  style?:
                      | 'blockquote'
                      | 'h2'
                      | 'h3'
                      | 'h4'
                      | 'h5'
                      | 'h6'
                      | 'normal'
                  listItem?: 'bullet' | 'number'
                  markDefs: Array<
                      | {
                            customUrl?: boolean
                            destinationRef?:
                                | {
                                      _ref: string
                                      _type: 'reference'
                                      _weak?: boolean
                                      [internalGroqTypeReferenceTo]?: 'page'
                                  }
                                | {
                                      _ref: string
                                      _type: 'reference'
                                      _weak?: boolean
                                      [internalGroqTypeReferenceTo]?: 'post'
                                  }
                            destinationHref?: string
                            blank?: boolean
                            _type: 'link'
                            _key: string
                        }
                      | {
                            customUrl?: boolean
                            destinationRef:
                                | {
                                      _type: 'page'
                                      title: string
                                      slug: {
                                          current: string
                                      }
                                  }
                                | {
                                      _type: 'post'
                                      title: string
                                      slug: {
                                          current: string
                                      }
                                  }
                                | null
                            destinationHref?: string
                            blank?: boolean
                            _type: 'link'
                            _key: string
                        }
                  > | null
                  level?: number
                  _type: 'block'
                  _key: string
              }>
          }
        | {
              _key: string
              _type: 'collectionGrid'
              title: string
              contentType: 'custom' | 'page' | 'post' | 'work'
              limit: number | null
              customContent?: Array<
                  | {
                        _ref: string
                        _type: 'reference'
                        _weak?: boolean
                        _key: string
                        [internalGroqTypeReferenceTo]?: 'page'
                    }
                  | {
                        _ref: string
                        _type: 'reference'
                        _weak?: boolean
                        _key: string
                        [internalGroqTypeReferenceTo]?: 'post'
                    }
                  | {
                        _ref: string
                        _type: 'reference'
                        _weak?: boolean
                        _key: string
                        [internalGroqTypeReferenceTo]?: 'work'
                    }
              >
              content:
                  | Array<never>
                  | Array<
                        | {
                              _id: string
                              _type: 'page'
                              title: string
                              subtitle: string
                              excerpt: null
                              slug: {
                                  current: string
                              }
                              image: {
                                  asset: {
                                      _id: string
                                      _type: 'sanity.imageAsset'
                                      _createdAt: string
                                      _updatedAt: string
                                      _rev: string
                                      originalFilename?: string
                                      label?: string
                                      title?: string
                                      description?: string
                                      altText?: string
                                      sha1hash?: string
                                      extension?: string
                                      mimeType?: string
                                      size?: number
                                      assetId?: string
                                      uploadId?: string
                                      path?: string
                                      url?: string
                                      metadata: SanityImageMetadata | null
                                      source?: SanityAssetSourceData
                                  } | null
                                  media?: unknown
                                  hotspot?: SanityImageHotspot
                                  crop?: SanityImageCrop
                                  _type: 'image'
                              }
                          }
                        | {
                              _id: string
                              _type: 'post'
                              title: string
                              subtitle: string
                              excerpt: null
                              slug: {
                                  current: string
                              }
                              image: {
                                  asset: {
                                      _id: string
                                      _type: 'sanity.imageAsset'
                                      _createdAt: string
                                      _updatedAt: string
                                      _rev: string
                                      originalFilename?: string
                                      label?: string
                                      title?: string
                                      description?: string
                                      altText?: string
                                      sha1hash?: string
                                      extension?: string
                                      mimeType?: string
                                      size?: number
                                      assetId?: string
                                      uploadId?: string
                                      path?: string
                                      url?: string
                                      metadata: SanityImageMetadata | null
                                      source?: SanityAssetSourceData
                                  } | null
                                  media?: unknown
                                  hotspot?: SanityImageHotspot
                                  crop?: SanityImageCrop
                                  _type: 'image'
                              }
                          }
                        | {
                              _id: string
                              _type: 'work'
                              title: string
                              subtitle: string
                              excerpt: null
                              slug: {
                                  current: string
                              } | null
                              image: {
                                  asset: {
                                      _id: string
                                      _type: 'sanity.imageAsset'
                                      _createdAt: string
                                      _updatedAt: string
                                      _rev: string
                                      originalFilename?: string
                                      label?: string
                                      title?: string
                                      description?: string
                                      altText?: string
                                      sha1hash?: string
                                      extension?: string
                                      mimeType?: string
                                      size?: number
                                      assetId?: string
                                      uploadId?: string
                                      path?: string
                                      url?: string
                                      metadata: SanityImageMetadata | null
                                      source?: SanityAssetSourceData
                                  } | null
                                  media?: unknown
                                  hotspot?: SanityImageHotspot
                                  crop?: SanityImageCrop
                                  _type: 'image'
                              }
                          }
                    >
                  | null
          }
        | {
              _key: string
              _type: 'frontpage'
              title: string
              content: string
              buttons: Array<{
                  _key: string
                  label: string
                  customUrl: boolean | null
                  destinationHref: string | null
                  destinationRef:
                      | {
                            _type: 'page'
                            title: string
                            slug: {
                                current: string
                            }
                        }
                      | {
                            _type: 'post'
                            title: string
                            slug: {
                                current: string
                            }
                        }
                      | null
                  blank: boolean | null
              }> | null
          }
    >
    image: {
        asset: {
            _id: string
            _type: 'sanity.imageAsset'
            _createdAt: string
            _updatedAt: string
            _rev: string
            originalFilename?: string
            label?: string
            title?: string
            description?: string
            altText?: string
            sha1hash?: string
            extension?: string
            mimeType?: string
            size?: number
            assetId?: string
            uploadId?: string
            path?: string
            url?: string
            metadata: SanityImageMetadata | null
            source?: SanityAssetSourceData
        } | null
        media?: unknown
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        _type: 'image'
    }
} | null
// Variable: MENU_QUERY
// Query: *[        _type == 'menu' &&         title == $title    ][0] {        ...,        links[] {            _key,            label,            customUrl,            destinationHref,            destinationRef->,            blank        }    }
export type MENU_QUERYResult = {
    _id: string
    _type: 'menu'
    _createdAt: string
    _updatedAt: string
    _rev: string
    title: string
    links: Array<{
        _key: string
        label: string
        customUrl: boolean | null
        destinationHref: string | null
        destinationRef:
            | {
                  _id: string
                  _type: 'page'
                  _createdAt: string
                  _updatedAt: string
                  _rev: string
                  title: string
                  subtitle: string
                  slug: Slug
                  content: Content
                  image: {
                      asset?: {
                          _ref: string
                          _type: 'reference'
                          _weak?: boolean
                          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
                      }
                      media?: unknown
                      hotspot?: SanityImageHotspot
                      crop?: SanityImageCrop
                      _type: 'image'
                  }
                  seo?: Seo
              }
            | {
                  _id: string
                  _type: 'post'
                  _createdAt: string
                  _updatedAt: string
                  _rev: string
                  title: string
                  subtitle: string
                  slug: Slug
                  content: Content
                  image: {
                      asset?: {
                          _ref: string
                          _type: 'reference'
                          _weak?: boolean
                          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
                      }
                      media?: unknown
                      hotspot?: SanityImageHotspot
                      crop?: SanityImageCrop
                      _type: 'image'
                  }
                  categories?: Array<{
                      _ref: string
                      _type: 'reference'
                      _weak?: boolean
                      _key: string
                      [internalGroqTypeReferenceTo]?: 'category'
                  }>
                  seo: Seo
                  publishDate: string
              }
            | null
        blank: boolean | null
    }> | null
} | null
// Variable: SETTINGS_QUERY
// Query: *[_type == 'settings'][0] {        title,        description,        url,        socialLinks    }
export type SETTINGS_QUERYResult = {
    title: string
    description: string
    url: string
    socialLinks: Array<{
        name:
            | 'Facebook'
            | 'GitHub'
            | 'Instagram'
            | 'LinkedIn'
            | 'Reddit'
            | 'Threads'
            | 'X'
            | 'Youtube'
        url: string
        _type: 'socialLink'
        _key: string
    }> | null
} | null

// Query TypeMap
import '@sanity/client'
declare module '@sanity/client' {
    interface SanityQueries {
        "\n    *[\n        _type == 'page' &&\n        defined(slug.current) &&\n        slug.current != '/'\n    ] {\n        \n    slug {\n        current\n    }\n\n    }\n": PAGE_PATHS_QUERYResult
        "\n    *[\n        _type == 'page' && \n        defined(slug.current) &&\n        slug.current == $slug\n    ][0] {\n        _id,\n        _type,\n        title,\n        subtitle,\n        \n    content[] {\n        ...,\n        _key,\n        _type,\n        'title': coalesce(title, 'Content Title'),\n        \n    _type == 'frontpage' => {\n        title,\n        content,\n        buttons[] {\n            _key,\n            label,\n            customUrl,\n            destinationHref,\n            destinationRef-> {\n                _type,\n                title,\n                \n    slug {\n        current\n    }\n\n            },\n            blank\n        }\n    }\n,\n        \n    _type == 'body' => {\n        content[] {\n            ...,\n            markDefs[] {\n                ...,\n                (_type == 'link' && customUrl != true) => {  \n                    destinationRef-> {\n                        _type,\n                        title,\n                        \n    slug {\n        current\n    }\n\n                    }\n                }\n            },\n        }\n    }\n,\n        \n    _type == 'collectionGrid' => {\n        contentType,\n        limit,\n        \"content\": select(\n            defined(customContent) && contentType == 'custom' => customContent[]-> {\n                _id,\n                _type,\n                title,\n                subtitle,\n                excerpt,\n                \n    slug {\n        current\n    }\n,\n                \n    image {\n        ...,\n        asset-> {\n            ...,\n            metadata\n        }\n    }\n\n            },\n            defined(contentType) && contentType != 'custom'  => *[_type == ^.contentType] {\n                _id,\n                _type,\n                title,\n                subtitle,\n                excerpt,\n                \n    slug {\n        current\n    }\n,\n                \n    image {\n        ...,\n        asset-> {\n            ...,\n            metadata\n        }\n    }\n\n            }|order(title asc),\n            []\n        )\n    }\n\n    }\n,\n        \n    image {\n        ...,\n        asset-> {\n            ...,\n            metadata\n        }\n    }\n\n    }\n": PAGE_QUERYResult
        "\n    *[\n        _type == 'post' && \n        defined(slug.current)\n    ]{ \n        \n    slug {\n        current\n    }\n\n    }\n": POST_PATHS_QUERYResult
        "\n    *[\n        _type == 'post' && \n        defined(slug.current) &&\n        slug.current == $slug\n    ][0] {\n        _id,\n        _type,\n        title,\n        subtitle,\n        \n    content[] {\n        ...,\n        _key,\n        _type,\n        'title': coalesce(title, 'Content Title'),\n        \n    _type == 'frontpage' => {\n        title,\n        content,\n        buttons[] {\n            _key,\n            label,\n            customUrl,\n            destinationHref,\n            destinationRef-> {\n                _type,\n                title,\n                \n    slug {\n        current\n    }\n\n            },\n            blank\n        }\n    }\n,\n        \n    _type == 'body' => {\n        content[] {\n            ...,\n            markDefs[] {\n                ...,\n                (_type == 'link' && customUrl != true) => {  \n                    destinationRef-> {\n                        _type,\n                        title,\n                        \n    slug {\n        current\n    }\n\n                    }\n                }\n            },\n        }\n    }\n,\n        \n    _type == 'collectionGrid' => {\n        contentType,\n        limit,\n        \"content\": select(\n            defined(customContent) && contentType == 'custom' => customContent[]-> {\n                _id,\n                _type,\n                title,\n                subtitle,\n                excerpt,\n                \n    slug {\n        current\n    }\n,\n                \n    image {\n        ...,\n        asset-> {\n            ...,\n            metadata\n        }\n    }\n\n            },\n            defined(contentType) && contentType != 'custom'  => *[_type == ^.contentType] {\n                _id,\n                _type,\n                title,\n                subtitle,\n                excerpt,\n                \n    slug {\n        current\n    }\n,\n                \n    image {\n        ...,\n        asset-> {\n            ...,\n            metadata\n        }\n    }\n\n            }|order(title asc),\n            []\n        )\n    }\n\n    }\n,\n        \n    image {\n        ...,\n        asset-> {\n            ...,\n            metadata\n        }\n    }\n\n    }\n": POST_QUERYResult
        "\n    *[\n        _type == 'work' &&\n        defined(slug.current)\n    ] {\n        \n    slug {\n        current\n    }\n\n    }\n": WORK_PATHS_QUERYResult
        "\n    *[\n        _type == 'work' &&\n        defined(slug.current) &&\n        slug.current == $slug\n    ][0] {\n        _id,\n        _type,\n        title,\n        subtitle,\n        url,\n        uses,\n        \n    content[] {\n        ...,\n        _key,\n        _type,\n        'title': coalesce(title, 'Content Title'),\n        \n    _type == 'frontpage' => {\n        title,\n        content,\n        buttons[] {\n            _key,\n            label,\n            customUrl,\n            destinationHref,\n            destinationRef-> {\n                _type,\n                title,\n                \n    slug {\n        current\n    }\n\n            },\n            blank\n        }\n    }\n,\n        \n    _type == 'body' => {\n        content[] {\n            ...,\n            markDefs[] {\n                ...,\n                (_type == 'link' && customUrl != true) => {  \n                    destinationRef-> {\n                        _type,\n                        title,\n                        \n    slug {\n        current\n    }\n\n                    }\n                }\n            },\n        }\n    }\n,\n        \n    _type == 'collectionGrid' => {\n        contentType,\n        limit,\n        \"content\": select(\n            defined(customContent) && contentType == 'custom' => customContent[]-> {\n                _id,\n                _type,\n                title,\n                subtitle,\n                excerpt,\n                \n    slug {\n        current\n    }\n,\n                \n    image {\n        ...,\n        asset-> {\n            ...,\n            metadata\n        }\n    }\n\n            },\n            defined(contentType) && contentType != 'custom'  => *[_type == ^.contentType] {\n                _id,\n                _type,\n                title,\n                subtitle,\n                excerpt,\n                \n    slug {\n        current\n    }\n,\n                \n    image {\n        ...,\n        asset-> {\n            ...,\n            metadata\n        }\n    }\n\n            }|order(title asc),\n            []\n        )\n    }\n\n    }\n,\n        \n    image {\n        ...,\n        asset-> {\n            ...,\n            metadata\n        }\n    }\n\n    }\n": WORK_QUERYResult
        "\n    *[\n        _type == 'menu' && \n        title == $title\n    ][0] {\n        ...,\n        links[] {\n            _key,\n            label,\n            customUrl,\n            destinationHref,\n            destinationRef->,\n            blank\n        }\n    }   \n": MENU_QUERYResult
        "\n    *[_type == 'settings'][0] {\n        title,\n        description,\n        url,\n        socialLinks\n    }\n": SETTINGS_QUERYResult
    }
}
